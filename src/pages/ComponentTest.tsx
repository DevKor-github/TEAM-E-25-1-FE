import { useState } from "react";
import SegmentedControl from "@/components/ui/SegmentedControl";
import ToggleButton from "@/components/ui/ToggleButton";
import AllToggleButton from "@/components/ui/AllToggleButton";
import EventImage from "@/components/ui/EventImage";
import EventTypeIndicator from "@/components/ui/EventTypeIndicator";
import EventDateIndicator from "@/components/ui/EventDateIndicator";
import EventCard from "@/components/ui/EventCard";
import EventThumbnail from "@/components/ui/EventThumbnail";
import FilterButton from "@/components/ui/FilterButton";
import Divider from "@/components/ui/Divider";
import MobileHeaderSection from "../components/MobileHeaderSection";

function ComponentTest() {
  const [selected2, setSelected2] = useState("Î†àÏù¥Î∏î1");
  const [selected3, setSelected3] = useState("Î†àÏù¥Î∏î2");
  const [selected4, setSelected4] = useState("Î†àÏù¥Î∏î3");

  const [categories, setCategories] = useState({
    festival: false,
    briefing: false
  });

  const handleAllToggle = (checked: boolean) => {
    setCategories({
      festival: checked,
      briefing: checked
    });
  };

  const handleCategoryToggle = (category: keyof typeof categories) => (checked: boolean) => {
    setCategories(prev => ({
      ...prev,
      [category]: checked
    }));
  };

  return (
    <div className="p-10 space-y-10 bg-white min-h-screen">
      <h1 className="text-xl font-bold">UI Ïª¥Ìè¨ÎÑåÌä∏ Îç∞Î™®</h1>

      {/* Segmented Control */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Segmented Control</h2>
        <div className="space-y-8">
          <div>
            <h3 className="text-sm text-gray-600 mb-2">2Í∞ú ÏÑ∏Í∑∏Î®ºÌä∏</h3>
            <SegmentedControl 
              segments={["Î†àÏù¥Î∏î1", "Î†àÏù¥Î∏î2"]} 
              selected={selected2} 
              onChange={setSelected2} 
            />
          </div>
          <div>
            <h3 className="text-sm text-gray-600 mb-2">3Í∞ú ÏÑ∏Í∑∏Î®ºÌä∏</h3>
            <SegmentedControl 
              segments={["Î†àÏù¥Î∏î1", "Î†àÏù¥Î∏î2", "Î†àÏù¥Î∏î3"]} 
              selected={selected3} 
              onChange={setSelected3} 
            />
          </div>
          <div>
            <h3 className="text-sm text-gray-600 mb-2">4Í∞ú ÏÑ∏Í∑∏Î®ºÌä∏</h3>
            <SegmentedControl 
              segments={["Î†àÏù¥Î∏î1", "Î†àÏù¥Î∏î2", "Î†àÏù¥Î∏î3", "Î†àÏù¥Î∏î4"]} 
              selected={selected4} 
              onChange={setSelected4} 
            />
          </div>
        </div>
      </div>

      {/* Toggle Buttons */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Toggle Buttons</h2>
        <div className="space-y-4">
          <AllToggleButton
            label="Î™®Îëê ÏÑ†ÌÉùÌïòÍ∏∞"
            defaultToggled={Object.values(categories).every(v => v)}
            onChange={handleAllToggle}
          />
          <div className="flex gap-4">
            <ToggleButton 
              label="Ï∂ïÏ†ú" 
              defaultToggled={categories.festival}
              onChange={handleCategoryToggle('festival')}
            />
            <ToggleButton 
              label="ÏÑ§Î™ÖÌöå" 
              defaultToggled={categories.briefing}
              onChange={handleCategoryToggle('briefing')}
            />
          </div>
        </div>
      </div>

      {/* Event Type Indicator */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Event Type Indicator</h2>
        <div className="flex gap-4">
          <EventTypeIndicator type="Í∞ïÏó∞" />
          <EventTypeIndicator type="Í≥µÎ™®Ï†Ñ" />
          <EventTypeIndicator type="ÎåÄÌöå" />
          <EventTypeIndicator type="Î∞ïÎûåÌöå" />
          <EventTypeIndicator type="ÏÑ§Î™ÖÌöå" />
          <EventTypeIndicator type="Ï∂ïÏ†ú" />
        </div>
      </div>

      {/* Event Date Indicator */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Event Date Indicator</h2>
        <div className="flex gap-4">
          <EventDateIndicator dday={117} status="upcoming" />
          <EventDateIndicator dday={7} status="imminent" />
          <EventDateIndicator dday={3} status="imminent" />
          <EventDateIndicator dday={1} status="imminent" />
          <EventDateIndicator status="ongoing" />
          <EventDateIndicator status="ended" />
        </div>
      </div>

      {/* Event Image */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Event Image</h2>
        <div className="grid grid-cols-3 gap-4">
          <EventImage src="" alt="Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå" />
        </div>
      </div>

      {/* Event Card & Thumbnail */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Event Card & Thumbnail</h2>
        <section>
          <h2 className="font-bold text-lg mb-2">Event Card</h2>
          <div className="rounded-2xl">
            <EventCard
              title="Ïù¥Î≤§Ìä∏ ÌÉÄÏù¥ÌãÄ"
              date="9Ïõî 25Ïùº (Ïàò)"
              type="Í∞ïÏó∞"
              dday={117}
              isLiked={true}
              likeCount={1000}
              imageUrl={"/assets/event_thumbnail_image.png"}
            />
            <EventCard
              title="Ïù¥Î≤§Ìä∏ ÌÉÄÏù¥ÌãÄ"
              date="9Ïõî 25Ïùº (Ïàò)"
              type="Í∞ïÏó∞"
              dday={117}
              isLiked={false}
              likeCount={1000}
              imageUrl={"/assets/event_thumbnail_image.png"}

            />
          </div>
        </section>
        <section>
          <h2 className="font-bold text-lg mb-2">Event Thumbnail</h2>
          <EventThumbnail
            title="Ïù¥Î≤§Ìä∏ ÌÉÄÏù¥ÌãÄ"
            org="dcamp officehour"
            imageUrl={"/assets/event_thumbnail_image.png"}
            period="25.04.24.(Î™©) ~ 25.05.15.(Î™©)"
            location="Ïò®ÎùºÏù∏ Ï†ëÏàò"
          />
        </section>
      </div>

      {/* Filter Button & Divider */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">_Filter Button</h2>
        <div className="p-6 rounded-2xl bg-blue-50 flex flex-col gap-4 w-fit">
          <div className="flex gap-4">
            <FilterButton label="ÌïÑÌÑ∞" />
            <FilterButton label="Ï¥àÍ∏∞Ìôî" />
          </div>
        </div>
        <h2 className="mt-10 mb-2 font-bold text-lg">_Divider</h2>
        <Divider />
      </div>

      {/* üîπ MobileHeaderSection */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">MobileHeaderSection</h2>
         <MobileHeaderSection
          eventCount={117}
          selectedChip="Í∞ïÏó∞ Ïô∏ 1Í∞ú"
          segments={["ÎßéÏù¥ Î≥∏", "ÎßéÏù¥ Ï∞úÌïú", "ÏûÑÎ∞ïÌïú"]}
          selectedSegment={selected2}
          onSegmentChange={setSelected2}
          onReset={() => alert('Ï¥àÍ∏∞Ìôî!')}
          />
        </div>
      </div>
    );
}

export default ComponentTest;